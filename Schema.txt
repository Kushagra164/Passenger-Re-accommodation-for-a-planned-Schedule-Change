#define uuid int
#define CARRIER_CODE_LENGTH 3              //to accommodate null pointer at the end
#define CITY_CODE_LENGTH 4
#define downline_consider true
#define default_schedule_scaling
#define allotment_scaling
 
# FC:25 BC:20 PC:15 EC:10

enum ActionCDs{HK,PD};
enum ClassCDs{FC,BC,PC,EC};

enum SpecialNames1 {INS,INF,CHD,ADT,UNN,S65};
enum SpecialNames2 {NRPS,NRSA};
enum SSRCodes {WCHR,WCHS,WCHC,LANG,MAAS,UNMR,BLND,DEAF,EXST,MEAL,NSST};


First Class: F,P
Business Class: C,J,Z
Premium Class: Q,R,S,T,H,M
Economy Class: Y,A,B,D,E,G,I,K,L,N,O,U,V,W,X

cabinToClassMap: map<CabinID: char,CLS_ID: string>

flightToInventoryMap: map<pair<FlightNum: int,DEP_DTMZ: DateTime>,InventoryID: uuid>;

InventoryID: int getFlight(FLT_NUM: int,DepartureDTMZ: DateTime){
}

uuidGenerator{
	forwardMap: map<ID: string, uuid: int>
	revMap: map<uuid:int , ID: string>
	
	int getID()
	string getString()
}

Schedule{
	ScheduleID: uuid;
	CarrierCD: char[CARRIER_CODE_LENGTH];
	FlightNum: int;
	EquipmentNo: pair<AircraftType: string,AircraftTailNo: string>;
	DepartureTime: Time;
	Arrivaltime: Time;
	StartDate: Date;
	EndDate: Date;
	Status: bool;   //0->planned  1->scheduled
	FlightPattern: string;
	DepartureDates: vector<InventoryID>;
};

scheduleMap: map<ScheduleId: uuid, schedule: Schedule*>

flightNumberMap: map<FlightNum: int,pair<src: char*,dest: char*>> 
cityToFlightNumberMap: map<pair<src: char*,dest: char*>,FlightNum: int>

Inventory{
	InventoryId: uuid;
	DepartureDate: Date;
	ArrivalDate: Date;

	TotalCapacity: int;
	TotalInventory: int;
	BookedInventory: int;

	FCTotalCapacity: int;
	FCTotalInventory: int;
	FCBookedInventory: int;
	
	BCTotalCapacity: int;
	BCTotalInventory: int;
	BCBookedInventory: int;

	PCTotalCapacity: int;
	PCTotalInventory: int;
	PCBookedInventory: int;
	
	ECTotalCapacity: int;
	ECTotalInventory: int;
	ECBookedInventory: int;
};

inventoryMap: map<InventoryId: uuid, inventory: Inventory*>


inventoryToScheduleMap: map<InventoryId: uuid,ScheduleId: uuid>

Passenger{
	PassengerID: uuid;
	LastName: string;
	FirstName: string;
	Nationality: string;
	PhoneNum: string;
	Email: string;
	DocID: string;
	DocType: string;
	SpecialName1: enum;
	SpecialName2: enum;
	SSRCode: enum;
};
passengerMap: map<PassengerID: uuid, Passenger*>
passengerToPnrMap: map<PassengerID: uuid, PnrID: uuid>

Pnr{
	PnrID: uuid;
	CreationDate: Date;
	PaxCnt: int;
	Passengers: vector<PassengerID>;
	Journeys: vector<JourneyID>;
};
pnrMap: map<PnrID: uuid, Pnr*>

Journey{
	JourneyID: uuid;
	ActionCD: enum;
	ClassCD: enum;
	Src: char[CITY_CODE_LENGTH];
	Dest: char[CITY_CODE_LENGTH];
	flights: vector<InventoryID>;
};

journeyMap: map<JourneyID: uuid, Journey*>

journeyToPnrMap: map<JourneyID: uuid, PnrID: uuid>

CancelledFlights: Set<InventoryID>
DelayedFlights: map<InventoryID,Time>





